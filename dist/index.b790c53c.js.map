{"mappings":"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","sources":["<anon>","src/assets/js/main.js"],"sourcesContent":["// navbar\n// elements\nconst navbar = document.querySelector(\"#navbar\");\nconst btn = document.querySelector(\"#button-navbar\");\n// function for translate navbar\nconst translateNavbar = (e)=>{\n    const buttonClicked = e.target;\n    if (buttonClicked.getAttribute(\"aria-pressed\") === \"false\") {\n        navbar.setAttribute(\"visual-hidden\", \"true\");\n        buttonClicked.setAttribute(\"aria-pressed\", \"true\");\n        buttonClicked.setAttribute(\"aria-expanded\", \"true\");\n    } else {\n        navbar.setAttribute(\"visual-hidden\", \"false\");\n        buttonClicked.setAttribute(\"aria-pressed\", \"false\");\n        buttonClicked.setAttribute(\"aria-expanded\", \"false\");\n    }\n};\nbtn.addEventListener(\"click\", translateNavbar);\n// send email\n//keys\nconst serviceId = \"service_7w757kr\";\nconst templateId = \"template_v5aow3t\";\nconst userId = \"E6haNCxwwlI-tMYbc\";\n// function which listen when user want send a email\nconst formElement = document.querySelector(\"#form-email\");\nif (formElement) document.querySelector(\"#form-email\").addEventListener(\"submit\", (e)=>{\n    e.preventDefault();\n    const nameElement = document.querySelector(\"#name\");\n    const surnameElement = document.querySelector(\"#surname\");\n    const emailElement = document.querySelector(\"#email\");\n    const messageElement = document.querySelector(\"#message\");\n    let params = {\n        name: nameElement.value,\n        surname: surnameElement.value,\n        email: emailElement.value,\n        message: messageElement.value\n    };\n    // send email\n    emailjs.send(serviceId, templateId, params, userId).then((response)=>{\n        console.log(response.status);\n        console.log(response.text);\n        nameElement.value = \"\";\n        surnameElement.value = \"\";\n        emailElement.value = \"\";\n        messageElement.value = \"\";\n    }).catch((error)=>{\n        console.log(error);\n    });\n});\n// sidenav\n// all elements\nconst sidenav = document.querySelector(\"#sidenav\");\nconst header = document.querySelector(\"header\");\nconst portfolioSection = document.querySelector(\"#portfolio\");\nconst aboutSection = document.querySelector(\"#about\");\nconst skillsSection = document.querySelector(\"#skills\");\nconst contactSection = document.querySelector(\"#contact\");\nconst topHeader = document.querySelector(\"#top-header\");\nif (sidenav) {\n    const options = {\n        rootMargin: \"-200px 0px\"\n    };\n    // observer\n    const observer = new IntersectionObserver(function callback(entries, observer) {\n        entries.forEach((entry)=>{\n            if (entry.isIntersecting) switch(entry.target.classList.value){\n                case \"portfolio\":\n                    sidenav.setAttribute(\"data-visual\", \"true\");\n                    sidenav.children[0].setAttribute(\"data-visual\", \"true\");\n                    sidenav.children[1].setAttribute(\"data-visual\", \"false\");\n                    sidenav.children[2].setAttribute(\"data-visual\", \"false\");\n                    sidenav.children[3].setAttribute(\"data-visual\", \"false\");\n                    break;\n                case \"about\":\n                    sidenav.setAttribute(\"data-visual\", \"true\");\n                    sidenav.children[0].setAttribute(\"data-visual\", \"false\");\n                    sidenav.children[1].setAttribute(\"data-visual\", \"true\");\n                    sidenav.children[2].setAttribute(\"data-visual\", \"false\");\n                    sidenav.children[3].setAttribute(\"data-visual\", \"false\");\n                    break;\n                case \"skills\":\n                    sidenav.setAttribute(\"data-visual\", \"true\");\n                    sidenav.children[0].setAttribute(\"data-visual\", \"false\");\n                    sidenav.children[1].setAttribute(\"data-visual\", \"false\");\n                    sidenav.children[2].setAttribute(\"data-visual\", \"true\");\n                    sidenav.children[3].setAttribute(\"data-visual\", \"false\");\n                    break;\n                case \"contact\":\n                    sidenav.setAttribute(\"data-visual\", \"true\");\n                    sidenav.children[0].setAttribute(\"data-visual\", \"false\");\n                    sidenav.children[1].setAttribute(\"data-visual\", \"false\");\n                    sidenav.children[2].setAttribute(\"data-visual\", \"false\");\n                    sidenav.children[3].setAttribute(\"data-visual\", \"true\");\n                    break;\n                case \"header\":\n                    sidenav.setAttribute(\"data-visual\", \"false\");\n                    // topHeader.setAttribute('data-background', 'transparent')\n                    sidenav.children[0].setAttribute(\"data-visual\", \"false\");\n                    sidenav.children[1].setAttribute(\"data-visual\", \"false\");\n                    sidenav.children[2].setAttribute(\"data-visual\", \"false\");\n                    sidenav.children[3].setAttribute(\"data-visual\", \"false\");\n                    break;\n            }\n            else entry.target.classList.value;\n        });\n    }, options);\n    observer.observe(portfolioSection);\n    observer.observe(aboutSection);\n    observer.observe(skillsSection);\n    observer.observe(contactSection);\n    observer.observe(header);\n}\n// change background color of navbar\nconst options = {\n    rootMargin: \"-200px 0px\"\n};\n// observer\nconst observer = new IntersectionObserver(function callback(entries, observer) {\n    entries.forEach((entry)=>{\n        if (entry.isIntersecting) {\n            if (entry.target.classList.value === \"header\") topHeader.setAttribute(\"data-background\", \"transparent\");\n        } else if (entry.target.classList.value === \"header\") topHeader.setAttribute(\"data-background\", \"neutral\");\n    });\n}, options);\nobserver.observe(header);\n\n//# sourceMappingURL=index.b790c53c.js.map\n","// navbar\n// elements\nconst navbar = document.querySelector('#navbar')\nconst btn = document.querySelector('#button-navbar')\n\n// function for translate navbar\nconst translateNavbar = e => {\n    const buttonClicked = e.target\n    if(buttonClicked.getAttribute('aria-pressed') === 'false') {\n        navbar.setAttribute('visual-hidden', 'true')\n        buttonClicked.setAttribute('aria-pressed', 'true')\n        buttonClicked.setAttribute('aria-expanded', 'true')\n    } else {\n        navbar.setAttribute('visual-hidden', 'false')\n        buttonClicked.setAttribute('aria-pressed', 'false')\n        buttonClicked.setAttribute('aria-expanded', 'false')\n    }\n}\n\n\nbtn.addEventListener('click', translateNavbar)\n\n\n// send email\n//keys\nconst serviceId = 'service_7w757kr'\nconst templateId = 'template_v5aow3t'\nconst userId = 'E6haNCxwwlI-tMYbc'\n\n// function which listen when user want send a email\nconst formElement = document.querySelector('#form-email')\nif(formElement) {\n    document.querySelector('#form-email').addEventListener(\"submit\", e => {\n        e.preventDefault();\n        const nameElement = document.querySelector('#name')\n        const surnameElement = document.querySelector('#surname')\n        const emailElement = document.querySelector('#email')\n        const messageElement = document.querySelector('#message')\n\n        let params = {\n            name: nameElement.value,\n            surname: surnameElement.value,\n            email: emailElement.value,\n            message: messageElement.value,\n        }\n        \n        // send email\n        emailjs.send(serviceId, templateId, params, userId)\n            .then(response => {\n                console.log(response.status)\n                console.log(response.text)\n                nameElement.value = ''\n                surnameElement.value = ''\n                emailElement.value = ''\n                messageElement.value = ''\n            })\n            .catch( error => {\n                console.log(error)\n            })\n        })\n}\n\n\n// sidenav\n\n// all elements\nconst sidenav = document.querySelector('#sidenav')\nconst header = document.querySelector('header')\nconst portfolioSection = document.querySelector('#portfolio')\nconst aboutSection = document.querySelector('#about')\nconst skillsSection = document.querySelector('#skills')\nconst contactSection = document.querySelector('#contact')\nconst topHeader = document.querySelector('#top-header')\n\nif(sidenav) {\n    const options = {\n        rootMargin: '-200px 0px'\n    }\n\n    // observer\n    const observer = new IntersectionObserver(function callback(entries, observer) {\n        entries.forEach(entry => {\n            if(entry.isIntersecting) {\n                switch(entry.target.classList.value) {\n                    case 'portfolio':\n                        sidenav.setAttribute('data-visual', 'true')\n                        sidenav.children[0].setAttribute('data-visual', 'true')\n                        sidenav.children[1].setAttribute('data-visual', 'false')\n                        sidenav.children[2].setAttribute('data-visual', 'false')\n                        sidenav.children[3].setAttribute('data-visual', 'false')\n                    break;\n                    case 'about':\n                        sidenav.setAttribute('data-visual', 'true')\n                        sidenav.children[0].setAttribute('data-visual', 'false')\n                        sidenav.children[1].setAttribute('data-visual', 'true')\n                        sidenav.children[2].setAttribute('data-visual', 'false')\n                        sidenav.children[3].setAttribute('data-visual', 'false')\n                    break;\n                    case 'skills':\n                        sidenav.setAttribute('data-visual', 'true')\n                        sidenav.children[0].setAttribute('data-visual', 'false')\n                        sidenav.children[1].setAttribute('data-visual', 'false')\n                        sidenav.children[2].setAttribute('data-visual', 'true')\n                        sidenav.children[3].setAttribute('data-visual', 'false')\n                    break;\n                    case 'contact':\n                        sidenav.setAttribute('data-visual', 'true')\n                        sidenav.children[0].setAttribute('data-visual', 'false')\n                        sidenav.children[1].setAttribute('data-visual', 'false')\n                        sidenav.children[2].setAttribute('data-visual', 'false')\n                        sidenav.children[3].setAttribute('data-visual', 'true')\n                    break;\n                    case 'header':\n                        sidenav.setAttribute('data-visual', 'false')\n                        // topHeader.setAttribute('data-background', 'transparent')\n                        sidenav.children[0].setAttribute('data-visual', 'false')\n                        sidenav.children[1].setAttribute('data-visual', 'false')\n                        sidenav.children[2].setAttribute('data-visual', 'false')\n                        sidenav.children[3].setAttribute('data-visual', 'false')\n                    break;\n                }\n            } else {\n                if(entry.target.classList.value === 'header') {\n                    // topHeader.setAttribute('data-background', 'neutral')\n                }\n            }\n        });\n    }, options)\n\n\n    observer.observe(portfolioSection)\n    observer.observe(aboutSection)\n    observer.observe(skillsSection)\n    observer.observe(contactSection)\n    observer.observe(header)\n}\n\n// change background color of navbar\n\nconst options = {\n    rootMargin: '-200px 0px'\n}\n\n// observer\nconst observer = new IntersectionObserver(function callback(entries, observer) {\n    entries.forEach(entry => {\n        if(entry.isIntersecting) {\n            if(entry.target.classList.value === 'header') {\n                    topHeader.setAttribute('data-background', 'transparent')\n            }\n        } else {\n            if(entry.target.classList.value === 'header') {\n                topHeader.setAttribute('data-background', 'neutral')\n            }\n        }\n    });\n}, options)\n\nobserver.observe(header)"],"names":["navbar","document","querySelector","btn","addEventListener","e","buttonClicked","target","getAttribute","setAttribute","formElement","preventDefault","nameElement","surnameElement","emailElement","messageElement","params","name","value","surname","email","message","emailjs","send","then","response","console","log","status","text","catch","error","sidenav","header","portfolioSection","aboutSection","skillsSection","contactSection","topHeader","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","classList","children","rootMargin","observe"],"version":3,"file":"index.b790c53c.js.map"}